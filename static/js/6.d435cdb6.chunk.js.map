{"version":3,"sources":["recycle/FormInput/FormInput.js","containers/EditProfile/EditProfile.js"],"names":["FormInput","React","forwardRef","props","ref","identity","type","formik","children","className","htmlFor","name","isTouched","touched","inputError","errors","getInputError","getFieldProps","Profile","userData","useSelector","state","login","contactNumber","country","userId","zipCode","id","loading","updateProfile","errorMessage","idToken","dispatch","useDispatch","useAlert","alertShown","showAlert","history","useEffect","actions","acknowledgeAlert","useFormik","initialValues","validationSchema","Yup","required","max","matches","min","onSubmit","formData","setTimeout","formHasErrors","Object","keys","length","valuesChanged","JSON","stringify","values","saveText","style","color","marginBottom","handleSubmit","onClick","replace","disabled","closeAlert"],"mappings":"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","file":"static/js/6.d435cdb6.chunk.js","sourcesContent":["import './form-input.scss';\r\nimport React from 'react';\r\n        \r\nconst FormInput = React.forwardRef((props,ref) => {\r\n\r\n    const{identity,\r\n        type,\r\n        formik,\r\n        children,\r\n    } = props;\r\n    \r\n    const getInputError = name =>{\r\n        const isTouched = formik.touched[name];\r\n        const inputError = formik.errors[name];\r\n        return ( isTouched && inputError && <span className='form-input__toolkit'>{inputError}</span> ) || null;\r\n      }\r\n\r\n    return (\r\n        <div className='form-input'>\r\n            <label className='form-input__label' htmlFor={identity}>{children} {getInputError(identity)}</label>\r\n            <input \r\n                ref={ref}\r\n                type={type}\r\n                className='form-input__field' \r\n                name={identity} {...formik.getFieldProps(identity)} \r\n            />\r\n        </div>\r\n    )\r\n})\r\n        \r\n        \r\nexport default FormInput ;\r\n\r\n        ","import '../../recycle/Button/button.scss'\r\nimport '../../recycle/Form/form.scss'\r\nimport '../../recycle/FormInput/form-input.scss';\r\n\r\nimport React,{useEffect} from 'react';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport * as actions from '../../store/actions/exports';\r\nimport Spinner from '../../recycle/Spinner/Spinner';\r\nimport FormInput from '../../recycle/FormInput/FormInput';\r\nimport Alert from '../../recycle/Alert/Alert';\r\nimport useAlert from '../../hooks/useAlert';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport ErrorPrompt from '../../recycle/Prompt/Prompt';\r\n\r\n\r\nconst Profile = props => {\r\n\r\n  const userData = useSelector(state => state.login.userData)\r\n  const {contactNumber,country,name,userId,zipCode,id} = userData;\r\n  const loading = useSelector(state => state.updateProfile.loading);\r\n  const errorMessage = useSelector(state => state.updateProfile.errorMessage);\r\n  const idToken = useSelector(state => state.login.idToken);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [alertShown,showAlert] = useAlert(false);\r\n\r\n  const {history} = props;\r\n\r\n  useEffect(() => {\r\n    dispatch(actions.startEdit())\r\n    return () => {\r\n      dispatch(actions.endEdit())\r\n    }\r\n\r\n  // eslint-disable-next-line\r\n  },[])\r\n\r\n\r\n\r\n  const goToProfile = () => {\r\n    history.replace('/profile')\r\n  }\r\n\r\n  const acknowledgeAlert = () => {\r\n      showAlert(false);\r\n  }\r\n\r\n  const formik = useFormik ({\r\n    initialValues: {\r\n      name:name,\r\n      country:country,\r\n      zipCode: zipCode,\r\n      contactNumber: contactNumber\r\n    },\r\n    validationSchema: Yup.object ({  \r\n        name: Yup.string()\r\n            .required('is required')\r\n            .max(20,'must not be longer than 20 characters'),\r\n        country: Yup.string()\r\n            .required('is required')\r\n            .max(20,'must not be longer than 20 characters'),\r\n        zipCode: Yup.string()\r\n            .required('is required')\r\n            .matches(/^[0-9]+$/,'must be a number')\r\n            .min(4,'must be 4 characters at least')\r\n            .max(4,'should not be more than 4 digits'),\r\n        contactNumber: Yup.string()\r\n            .required('is required')\r\n            .matches(/^[0-9]+$/,'must be a number')\r\n            .max(20,'must not be longer than 20 digits')\r\n    }),\r\n    onSubmit: (formData) => {\r\n      dispatch(actions.updateProfile(formData,id,userId,idToken,showAlert,history))\r\n    }\r\n  });\r\n  \r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      \r\n    },500)\r\n  })\r\n\r\n\r\n  const formHasErrors = Object.keys(formik.errors).length > 0;\r\n  const valuesChanged = JSON.stringify(formik.initialValues) !== JSON.stringify(formik.values)\r\n  const saveText = (  valuesChanged && 'Save') || 'No changes'\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className='form'>\r\n        {loading? (\r\n          <div>\r\n            <p style={{color:'wheat',marginBottom:'1rem'}}>Saving changes...</p>\r\n            <Spinner/>\r\n          </div>\r\n        )\r\n          :<form className='form__form' onSubmit={formik.handleSubmit}>\r\n\r\n              <FormInput formik={formik} identity='name' type=\"text\">Name</FormInput>\r\n              <FormInput formik={formik} identity='country' type=\"text\">Country</FormInput>\r\n              <FormInput formik={formik} identity='zipCode' type=\"text\">Zip Code</FormInput>\r\n              <FormInput formik={formik} identity='contactNumber' type=\"text\">Contact Number</FormInput>\r\n\r\n              <button type=\"button\" className=\"button--more form__cancel\" onClick={goToProfile}>Cancel</button>\r\n              <button disabled={(!valuesChanged || formHasErrors)} type=\"submit\" className=\"button--success form__submit\">{saveText}</button>\r\n          </form>}\r\n       </div>\r\n      \r\n\r\n      {!alertShown? null :\r\n      <Alert closeAlert={acknowledgeAlert} >\r\n        <ErrorPrompt acknowledgeAlert={acknowledgeAlert}>{errorMessage}</ErrorPrompt>\r\n      </Alert>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"sourceRoot":""}