{"version":3,"sources":["assets/icons/bacon.svg","assets/icons/cheese.svg","assets/icons/meat.svg","assets/icons/salad.svg","containers/Orders/Ingredient.js","containers/Orders/Order.js","containers/Orders/Orders.js"],"names":["module","exports","props","name","quantity","className","src","salad","alt","aria-hidden","bacon","meat","cheese","renderLogo","Order","order","ingredients","purchaseDate","totalPrice","date","Date","formattedDate","getFullYear","getMonth","getDate","ingredientList","ing","push","key","Ingredient","renderIngredients","Orders","userId","useSelector","state","login","idToken","orders","fetchOrders","loading","ordersStatus","useEffect","dispatch","actions","useDispatch","style","color","marginBottom","Spinner","map","renderOrders"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,mKCW5B,WAAAC,GAAU,IACdC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,SAkBb,OAEG,wBAAIC,UAAU,cACT,wBAAIA,UAAU,oBAnBH,SAAAF,GACf,OAAOA,GACH,IAAK,QACD,OAAO,yBAAKG,IAAKC,IAAOC,IAAG,YAAOL,GAAQM,cAAY,SAE1D,IAAK,QACD,OAAO,yBAAKH,IAAKI,IAAOF,IAAG,YAAOL,GAAQM,cAAY,SAE1D,IAAK,OACD,OAAO,yBAAKH,IAAKK,IAAMH,IAAG,YAAOL,GAAQM,cAAY,SAEzD,QACI,OAAO,yBAAKH,IAAKM,IAAQJ,IAAG,YAAOL,GAAQM,cAAY,UAQtDI,CAAWV,IAEhB,wBAAIE,UAAU,wBAAwBD,KCFnCU,EA3BD,SAAAZ,GAAU,IAAD,EAC2BA,EAAMa,MAA7CC,EADY,EACZA,YAAYC,EADA,EACAA,aAAaC,EADb,EACaA,WAE1BC,EAAO,IAAIC,KAAKH,GAChBI,EAAa,UAAMF,EAAKG,cAAX,YAA4BH,EAAKI,WAAa,EAA9C,YAAmDJ,EAAKK,WAY3E,OACI,yBAAKnB,UAAU,SACX,yBAAKA,UAAU,eAAegB,GAC9B,wBAAIhB,UAAU,sBAdI,SAAAW,GACtB,IAAMS,EAAiB,GACvB,IAAK,IAAMC,KAAOV,EACdS,EAAeE,KACX,wBAAIC,IAAKF,EAAKrB,UAAU,qBACpB,kBAACwB,EAAD,CAAY1B,KAAMuB,EAAKtB,SAAUY,EAAYU,OAIzD,OAAOD,EAMEK,CAAkBd,IAEvB,yBAAKX,UAAU,gBAAf,KAAiCa,K,eCyB9Ba,UA9CA,SAAA7B,GACd,IAAM8B,EAASC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMH,UAC1CI,EAAUH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,WAC3CC,EAASJ,aAAY,SAAAC,GAAK,OAAIA,EAAMI,YAAYD,UAChDE,EAAUN,aAAY,SAAAC,GAAK,OAAIA,EAAMI,YAAYC,WACjDC,EAAeP,aAAY,SAAAC,GAAK,OAAIA,EAAMI,YAAYE,gBAE5DC,qBAAU,WACY,aAAjBD,GACHE,EAASC,IAAoBP,EAASJ,MAIrC,IAEH,IAAMU,EAAWE,cAajB,OACC,oCACEL,EACA,6BACC,uBAAGM,MAAO,CAAEC,MAAO,QAASC,aAAc,SAA1C,+BAGA,kBAACC,EAAA,EAAD,OAGD,6BAAS3C,UAAU,oBAClB,4BAtBiB,SAAAgC,GACpB,OAAOA,EAAOY,KAAI,SAAAlC,GAEjB,OACC,wBAAIV,UAAU,gBAAgBuB,IAAKb,EAAMa,KACxC,kBAAC,EAAD,CAAOb,MAAOA,QAiBTmC,CAAab","file":"static/js/4.b54ac37f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bacon.064cfd76.svg\";","module.exports = __webpack_public_path__ + \"static/media/cheese.e87597a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/meat.03ca5fc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/salad.95e14485.svg\";","import './ingredient.scss'\r\n\r\nimport bacon from '../../assets/icons/bacon.svg';\r\nimport cheese from '../../assets/icons/cheese.svg';\r\nimport meat from '../../assets/icons/meat.svg';\r\nimport salad from '../../assets/icons/salad.svg';\r\n\r\nimport React from 'react';\r\n\r\n\r\n\r\nexport default props => {\r\n    const {name, quantity} = props;\r\n\r\n    const renderLogo = name => {\r\n        switch(name){\r\n            case 'salad':\r\n                return <img src={salad} alt={`a ${name}`} aria-hidden='true'/>\r\n\r\n            case 'bacon':\r\n                return <img src={bacon} alt={`a ${name}`} aria-hidden='true'/>\r\n            \r\n            case 'meat':\r\n                return <img src={meat} alt={`a ${name}`} aria-hidden='true'/>\r\n            \r\n            default: \r\n                return <img src={cheese} alt={`a ${name}`} aria-hidden='true'/>\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n       <dl className=\"ingredient\">\r\n            <dt className=\"ingredient__logo\">\r\n                {renderLogo(name)}\r\n            </dt>\r\n            <dd className=\"ingredient__quantity\">{quantity}</dd>\r\n       </dl>\r\n    )\r\n}","\r\nimport './order.scss';\r\nimport React from 'react';\r\nimport Ingredient from './Ingredient';\r\n\r\n\r\n\r\nconst Order = props => {\r\n    const {ingredients,purchaseDate,totalPrice} = props.order;\r\n\r\n    const date = new Date(purchaseDate)\r\n    const formattedDate = `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`\r\n    const renderIngredients = ingredients => {\r\n        const ingredientList = [];\r\n        for (const ing in ingredients ){\r\n            ingredientList.push(\r\n                <li key={ing} className=\"order__ingredient\">\r\n                    <Ingredient name={ing} quantity={ingredients[ing]}/>\r\n                </li>\r\n            )\r\n        }\r\n        return ingredientList\r\n    }\r\n    return (\r\n        <div className='order'>\r\n            <div className=\"order__date\">{formattedDate}</div>\r\n            <ul className=\"order__ingredients\">\r\n                {renderIngredients(ingredients)}\r\n            </ul>\r\n            <div className=\"order__price\">$ {totalPrice}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Order;","import \"./orders.scss\"\r\n\r\nimport React, { useEffect } from \"react\"\r\nimport * as actions from \"../../store/actions/exports\"\r\nimport Order from \"./Order\"\r\nimport Spinner from \"../../recycle/Spinner/Spinner\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nconst Orders = props => {\r\n\tconst userId = useSelector(state => state.login.userId)\r\n\tconst idToken = useSelector(state => state.login.idToken)\r\n\tconst orders = useSelector(state => state.fetchOrders.orders)\r\n\tconst loading = useSelector(state => state.fetchOrders.loading)\r\n\tconst ordersStatus = useSelector(state => state.fetchOrders.ordersStatus)\r\n\r\n\tuseEffect(() => {\r\n\t\tif (ordersStatus === \"outdated\") {\r\n\t\t\tdispatch(actions.fetchOrders(idToken, userId))\r\n\t\t} else {\r\n\t\t}\r\n\t\t// eslint-disable-next-line\r\n\t}, [])\r\n\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst renderOrders = orders => {\r\n\t\treturn orders.map(order => {\r\n\t\t\t//return array of <li>s\r\n\t\t\treturn (\r\n\t\t\t\t<li className=\"orders__order\" key={order.key}>\r\n\t\t\t\t\t<Order order={order} />\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading ? (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<p style={{ color: \"wheat\", marginBottom: \"1rem\" }}>\r\n\t\t\t\t\t\tFetching previous orders...\r\n\t\t\t\t\t</p>\r\n\t\t\t\t\t<Spinner />\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<section className=\"orders scrollbar\">\r\n\t\t\t\t\t<ul>{renderOrders(orders)}</ul>\r\n\t\t\t\t</section>\r\n\t\t\t)}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default Orders\r\n"],"sourceRoot":""}