{"version":3,"sources":["containers/Order/Order.module.css","containers/Order/Order.js","containers/withErrorHandler/withErrorHandler.js","hooks/useHttpErrorHandler.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredient","push","name","amount","ingredientOutput","map","key","style","textTransform","display","margin","border","padding","className","classes","Order","marginBottom","price","withErrorHandler","WrappedComponent","axios","httpClient","useState","error","setError","reqInterceptor","interceptors","request","use","req","resInterceptor","response","res","err","useEffect","eject","useHttpErrorHandler","confirmError","Alert","closeAlert","message","orders","useSelector","state","fetchOrders","fetching","idToken","login","userId","dispatch","useDispatch","actions","ordersList","Spinner","id"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,MAAQ,uB,8ECmCXC,EAhCD,SAACC,GACX,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAcF,EAAMC,YACzBA,EAAYE,KAAK,CACTC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAL,GACrC,OAAO,0BACHM,IAAKN,EAAWE,KAChBK,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,UACRC,OAAQ,iBACRC,QAAS,WAEXZ,EAAWE,KATV,MASmBF,EAAWG,OAT9B,QAYX,OACI,yBAAKU,UAAWC,IAAQC,OACpB,uBAAGR,MAAO,CAACS,aAAc,WAAzB,gBAAkDZ,GAClD,sCAAW,qCAAWN,EAAMmB,U,gCCXzBC,EAfU,SAACC,EAAkBC,GACxC,OAAO,SAAAtB,GAAU,IAAD,ECHL,SAAAuB,GAAe,IAAD,EACCC,mBAAS,MADV,mBAClBC,EADkB,KACXC,EADW,KAGfC,EAAiBJ,EAAWK,aAAaC,QAAQC,KAAI,SAAAC,GAEvD,OADAL,EAAS,MACFK,KAELC,EAAiBT,EAAWK,aAAaK,SAASH,KAAI,SAAAI,GAAG,OAAIA,KAAK,SAAAC,GACpET,EAASS,MAGbC,qBAAU,WACN,OAAO,WACHb,EAAWK,aAAaC,QAAQQ,MAAMV,GACtCJ,EAAWK,aAAaK,SAASI,MAAML,MAG7C,CAACL,EAAeK,IAMtB,MAAO,CAACP,EAJiB,WACjBC,EAAS,QDhBeY,CAAoBhB,GADpC,mBACPG,EADO,KACAc,EADA,KAEZ,OACI,oCACId,EAAM,kBAACe,EAAA,EAAD,CAAOC,WAAYF,GACrBd,EAAMiB,SACF,KAET,kBAACrB,EAAqBrB,M,uBE8BtBoB,aAnCA,SAAApB,GAEX,IAAM2C,EAASC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYH,UAChDI,EAAWH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,YAClDC,EAAUJ,aAAY,SAAAC,GAAK,OAAIA,EAAMI,MAAMD,WAC3CE,EAASN,aAAY,SAAAC,GAAK,OAAIA,EAAMI,MAAMC,UAE1CC,EAAWC,cAGjBhB,qBAAU,WACNe,EAASE,IAAoBL,EAAQE,MAEvC,CAACF,EAAQE,IAEX,IAAII,EAAa,kBAACC,EAAA,EAAD,MAajB,OAZYR,IACAO,EAAaX,EAAOpC,KAAI,SAAAR,GACZ,OACI,kBAACkB,EAAD,CACIT,IAAKT,EAAMyD,GACXvD,YAAaF,EAAME,YACnBkB,MAAOpB,EAAMoB,YAOzC,6BACKmC,KAK0BhC","file":"static/js/9.b3de4da7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__2UZPd\"};","import React from 'react';\r\nimport classes from './Order.module.css'\r\n\r\n\r\nconst order = (props) => {\r\n    const ingredients = [];\r\n\r\n    for (let ingredient in props.ingredients){\r\n        ingredients.push({\r\n                name: ingredient,\r\n                amount: props.ingredients[ingredient]\r\n            }\r\n        )\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ingredient => {\r\n        return <span \r\n            key={ingredient.name}\r\n            style={{\r\n                textTransform: \"capitalize\",\r\n                display: 'inline-block',\r\n                margin: '0 .8rem',\r\n                border: '1px solid gray',\r\n                padding: '0.5rem'\r\n            }}\r\n            >{ingredient.name} : {ingredient.amount} </span>\r\n    })\r\n\r\n    return(\r\n        <div className={classes.Order}>\r\n            <p style={{marginBottom: '1.2rem'}}>Ingredients: {ingredientOutput}</p>\r\n            <p>Price : <strong>$ {props.price}</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default order;","import React from 'react';\r\nimport Alert from '../../recycle/Alert/Alert';\r\nimport useHttpErrorHandler from '../../hooks/useHttpErrorHandler'\r\n\r\n\r\nconst withErrorHandler = (WrappedComponent, axios) => {\r\n    return props => {\r\n      const [error, confirmError] = useHttpErrorHandler(axios);\r\n        return(\r\n            <>\r\n               {error?<Alert closeAlert={confirmError}>\r\n                   {error.message}\r\n               </Alert>:null}\r\n\r\n               <WrappedComponent {...props}/>\r\n           </>\r\n            )\r\n    }\r\n}\r\n\r\nexport default withErrorHandler;","\r\nimport {useState,useEffect} from 'react';\r\n\r\nexport default httpClient => {\r\n    const [error, setError] = useState(null)\r\n\r\n        const reqInterceptor = httpClient.interceptors.request.use(req => {\r\n            setError(null)\r\n            return req;\r\n        })\r\n        const resInterceptor = httpClient.interceptors.response.use(res => res, err => {\r\n            setError(err)\r\n        })\r\n\r\n        useEffect(() => {\r\n            return () => {\r\n                httpClient.interceptors.request.eject(reqInterceptor);\r\n                httpClient.interceptors.response.eject(resInterceptor);\r\n            }\r\n        // eslint-disable-next-line\r\n        },[reqInterceptor,resInterceptor]) \r\n\r\n        const confirmError = () => {\r\n            setError(null)\r\n        }\r\n\r\n    return [error,confirmError]\r\n}","import React, {useEffect} from 'react';\r\nimport Order from '../Order/Order';\r\nimport axios from 'axios';\r\nimport withErrorHandler from '../withErrorHandler/withErrorHandler';\r\nimport {useSelector,useDispatch} from 'react-redux';\r\nimport * as actions from '../../store/actions/exports';\r\nimport Spinner from '../../recycle/Spinner/Spinner';\r\n\r\n\r\nconst Orders = props => {\r\n        \r\n    const orders = useSelector(state => state.fetchOrders.orders)\r\n    const fetching = useSelector(state => state.fetchOrders.fetching)\r\n    const idToken = useSelector(state => state.login.idToken)\r\n    const userId = useSelector(state => state.login.userId)\r\n\r\n    const dispatch = useDispatch();\r\n \r\n\r\n    useEffect(() => {\r\n        dispatch(actions.fetchOrders(idToken,userId))\r\n    // eslint-disable-next-line\r\n    },[idToken,userId])\r\n\r\n    let ordersList = <Spinner/>;\r\n            if (fetching){\r\n                ordersList = orders.map(order => {\r\n                            return (\r\n                                <Order \r\n                                    key={order.id}\r\n                                    ingredients={order.ingredients}\r\n                                    price={order.price}\r\n                                />\r\n                            )\r\n                        }) \r\n            }\r\n    \r\n    return(\r\n        <div>\r\n            {ordersList}\r\n        </div>\r\n        )\r\n}\r\n\r\nexport default withErrorHandler(Orders,axios);"],"sourceRoot":""}