{"version":3,"sources":["recycle/FormInput/FormInput.js","containers/Signup/Signup.js"],"names":["FormInput","props","identity","type","formik","children","getInputError","name","touched","errors","errorMessage","className","errorClass","htmlFor","getFieldProps","Signup","dispatch","useDispatch","isSignupComplete","useSelector","state","signup","loading","error","useFormik","initialValues","nickname","address","email","password","validationSchema","Yup","required","min","onSubmit","signupData","actions","formErrors","Object","keys","length","signupContent","message","replace","getFormToolkit","handleSubmit","disabled"],"mappings":"oJAAA,2BAmCeA,IA7BG,SAAAC,GAAU,IAElBC,EAIFD,EAJEC,SACFC,EAGAF,EAHAE,KACAC,EAEAH,EAFAG,OACAC,EACAJ,EADAI,SAGEC,EAAgB,SAAAC,GAClB,OAAGH,EAAOI,QAAQD,IAASH,EAAOK,OAAOF,GAChC,CAACG,aAAc,0BAAMC,UAAU,uBAAuBP,EAAOK,OAAOF,IAAeK,WAAY,+BAE/F,CAACF,aAAc,KAAME,WAAW,KAI7C,OACI,yBAAKD,UAAU,cACX,2BAAOA,UAAU,oBAAoBE,QAASX,GAAWG,EAAzD,IAAoEC,EAAcJ,GAAUQ,cAC5F,yCACIP,KAAMA,EACNQ,UAAS,2BAAsBL,EAAcJ,GAAUU,YACvDL,KAAML,GAAcE,EAAOU,cAAcZ,Q,iCC5BzD,mGAyEea,UA7DA,SAAAd,GAEb,IAAMe,EAAWC,cACXC,EAAmBC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,oBACrDI,EAAUH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOC,WAC5CC,EAAQJ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOE,SAE1CnB,EAASoB,YAAW,CACxBC,cAAe,CACbC,SAAS,GACTC,QAAQ,GACRC,MAAM,GACNC,SAAS,IAEXC,iBAAkBC,IAAY,CAC1BH,MAAOG,MACFH,MAAO,cACPI,SAAU,eACfH,SAAUE,MACLC,SAAU,eACVC,IAAK,EAAG,kCAGjBC,SAAU,SAAAC,GACRnB,EAASoB,IAAeD,OAWtBE,EAAaC,OAAOC,KAAKnC,EAAOK,QAAQ+B,OAE1CC,EACF,oCAVqB,SAACnB,EAAQC,GAC9B,OAAGD,EAAgB,uBAAGX,UAAU,iBAAb,yBACXY,EAAc,uBAAGZ,UAAU,eAAeY,EAAMmB,QAAQC,QAAQ,KAAK,KAAO,OACvE,uBAAGhC,UAAU,iBAAb,+BAQViC,CAAetB,EAAQC,GACvBD,EAAS,kBAAC,IAAD,MAAY,0BAAMX,UAAU,aAAauB,SAAU9B,EAAOyC,cAElE,kBAAC,IAAD,CAAWzC,OAAQA,EAAQF,SAAS,QAAQC,KAAK,SAAjD,SACA,kBAAC,IAAD,CAAWC,OAAQA,EAAQF,SAAS,WAAWC,KAAK,YAApD,YAEA,4BAAQ2C,UAAWT,GAAc,EAAGlC,KAAK,SAASQ,UAAU,gCAA5D,YASN,OAJGO,IACDuB,EAAgB,+EAIhB,yBAAK9B,UAAU,QACZ8B","file":"static/js/6.6658f28f.chunk.js","sourcesContent":["import './form-input.scss';\r\nimport React from 'react';\r\n        \r\n\r\n        \r\n        \r\nconst FormInput = props => {\r\n\r\n    const{identity,\r\n        type,\r\n        formik,\r\n        children,\r\n    } = props;\r\n    \r\n    const getInputError = name =>{\r\n        if(formik.touched[name] && formik.errors[name]){\r\n          return {errorMessage: <span className='form-input__toolkit'>{formik.errors[name]}</span>, errorClass: ' form-input__field--invalid'}\r\n        } else {\r\n          return {errorMessage: null, errorClass:''}\r\n        }\r\n      }\r\n\r\n    return (\r\n        <div className='form-input'>\r\n            <label className='form-input__label' htmlFor={identity}>{children} {getInputError(identity).errorMessage}</label>\r\n            <input \r\n                type={type}\r\n                className={`form-input__field${getInputError(identity).errorClass}`} \r\n                name={identity} {...formik.getFieldProps(identity)} \r\n            />\r\n        </div>\r\n    )\r\n}\r\n        \r\n        \r\nexport default FormInput ;\r\n\r\n        ","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport * as actions from '../../store/actions/exports';\r\nimport '../../recycle/Button/button.scss'\r\nimport '../../recycle/Form/form.scss'\r\nimport '../../recycle/FormInput/form-input.scss';\r\nimport Spinner from '../../recycle/Spinner/Spinner';\r\nimport FormInput from '../../recycle/FormInput/FormInput';\r\n\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst Signup = props => {\r\n\r\n  const dispatch = useDispatch();\r\n  const isSignupComplete = useSelector(state => state.signup.isSignupComplete)\r\n  const loading = useSelector(state => state.signup.loading);\r\n  const error = useSelector(state => state.signup.error);\r\n\r\n  const formik = useFormik ({\r\n    initialValues: {\r\n      nickname:'',\r\n      address:'',\r\n      email:'',\r\n      password:''\r\n    },\r\n    validationSchema: Yup.object ({  \r\n        email: Yup.string ()\r\n            .email ('is invalid')\r\n            .required ('is required'),\r\n        password: Yup.string ()\r\n            .required ('is required')\r\n            .min (6, 'must be 6 characters atleast')\r\n    }),\r\n\r\n    onSubmit: signupData => {\r\n      dispatch(actions.signup(signupData))\r\n    }\r\n  });\r\n  \r\n  const getFormToolkit = (loading,error) => {\r\n    if(loading){return <p className='form__toolkit'>Creating your account</p>}\r\n    else if(error){return <p className='form__error'>{error.message.replace(/_/g,' ') + ' :('}</p>}\r\n    else {return <p className='form__toolkit'>Please provide account info</p>}\r\n  }\r\n\r\n\r\n  const formErrors = Object.keys(formik.errors).length;\r\n\r\n  let signupContent = (\r\n    <>\r\n      {getFormToolkit(loading,error)}\r\n      {loading? <Spinner/>: <form className='form__form' onSubmit={formik.handleSubmit}>\r\n\r\n        <FormInput formik={formik} identity='email' type=\"email\">Email</FormInput>\r\n        <FormInput formik={formik} identity='password' type=\"password\">Password</FormInput>\r\n\r\n        <button disabled={!formErrors <= 0} type=\"submit\" className=\"button--success form__submit\">Submit</button>\r\n      </form>}\r\n    </>\r\n  )\r\n\r\n  if(isSignupComplete){\r\n    signupContent = <p>Account successfully created! You may now login</p>\r\n  }\r\n\r\n  return (\r\n    <div className='form'>\r\n      {signupContent}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"sourceRoot":""}