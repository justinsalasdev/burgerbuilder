{"version":3,"sources":["containers/Login/Login.js"],"names":["Login","props","dispatch","useDispatch","loading","useSelector","state","authenticate","error","formik","useFormik","initialValues","email","password","validationSchema","Yup","required","min","onSubmit","loginData","actions","inputError","name","touched","errors","errorMessage","className","errorClass","formErrors","Object","keys","length","message","replace","formToolkit","handleSubmit","htmlFor","getFieldProps","type","disabled"],"mappings":"oJAAA,0FAuFeA,UA7ED,SAAAC,GACZ,IAAMC,EAAWC,cACXC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAaH,WAClDI,EAAQH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,aAAaC,SAMhDC,EAASC,YAAW,CACxBC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,IAAY,CAC5BH,MAAOG,MACJH,MAAO,cACPI,SAAU,eACbH,SAAUE,MACPC,SAAU,eACVC,IAAK,EAAG,kCAGbC,SAAU,SAAAC,GACRjB,EAASkB,IAAcD,OAIrBE,EAAa,SAAAC,GACjB,OAAGb,EAAOc,QAAQD,IAASb,EAAOe,OAAOF,GAChC,CAACG,aAAc,0BAAMC,UAAU,uBAAuBjB,EAAOe,OAAOF,IAAeK,WAAY,+BAE/F,CAACF,aAAc,KAAME,WAAW,KAcrCC,EAAaC,OAAOC,KAAKrB,EAAOe,QAAQO,OAE9C,OACE,yBAAKL,UAAU,SAbG,SAACtB,EAAQI,GAC3B,OAAGJ,EACM,uBAAGsB,UAAU,kBAAb,qBACClB,EACD,uBAAGkB,UAAU,gBAAgBlB,EAAMwB,QAAQC,QAAQ,KAAK,KAAO,OAE/D,KASNC,CAAY9B,EAAQI,GAEpBJ,EAAS,kBAAC,IAAD,MAAY,0BAAMsB,UAAU,cAAcR,SAAUT,EAAO0B,cACjE,yBAAKT,UAAU,cACb,2BAAOA,UAAU,oBAAoBU,QAAQ,SAA7C,iBAAoEf,EAAW,SAASI,cACxF,yCACEC,UAAS,2BAAsBL,EAAW,SAASM,YACnDL,KAAK,SAAYb,EAAO4B,cAAe,YAI3C,yBAAKX,UAAU,cACb,2BAAOA,UAAU,oBAAoBU,QAAQ,SAA7C,YAA+Df,EAAW,YAAYI,cACtF,yCACEC,UAAS,2BAAsBL,EAAW,YAAYM,YACtDL,KAAK,WAAWgB,KAAK,YAAe7B,EAAO4B,cAAe,eAIhE,4BAAQE,UAAWX,GAAc,EAAGU,KAAK,SAASZ,UAAU,iCAA5D","file":"static/js/5.dca77349.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport * as actions from '../../store/actions/exports';\r\nimport './login.scss';\r\nimport '../../recycle/Button/button.scss'\r\nimport '../../recycle/FormInput/form-input.scss';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Spinner from '../../recycle/Spinner/Spinner';\r\n\r\nconst Login = props => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(state => state.authenticate.loading);\r\n  const error = useSelector(state => state.authenticate.error);\r\n  // const isAuthenticated = useSelector(state => state.authenticate.token !== null);\r\n  // Notice that we have to initialize ALL of fields with values. These\r\n  // could come from props, but since we don't want to prefill this form,\r\n  // we just use an empty string. If you don't do this, React will yell\r\n  // at you.\r\n  const formik = useFormik ({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    validationSchema: Yup.object ({\r\n      email: Yup.string ()\r\n        .email ('is invalid')\r\n        .required ('is required'),\r\n      password: Yup.string ()\r\n        .required ('is required')\r\n        .min (6, 'must be 6 characters atleast')\r\n    }),\r\n\r\n    onSubmit: loginData => {\r\n      dispatch(actions.login(loginData))\r\n    }\r\n  });\r\n\r\n  const inputError = name =>{\r\n    if(formik.touched[name] && formik.errors[name]){\r\n      return {errorMessage: <span className='form-input__toolkit'>{formik.errors[name]}</span>, errorClass: ' form-input__field--invalid'}\r\n    } else {\r\n      return {errorMessage: null, errorClass:''}\r\n    }\r\n  }\r\n\r\n  const formToolkit = (loading,error) => {\r\n    if(loading){\r\n      return <p className='login__loading'>Logging you in...</p>\r\n    } else if(error){\r\n      return <p className='login__error'>{error.message.replace(/_/g,' ') + ' :('}</p>\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n     \r\n  const formErrors = Object.keys(formik.errors).length;\r\n\r\n  return (\r\n    <div className='login'>\r\n\r\n      {formToolkit(loading,error)}\r\n\r\n      {loading? <Spinner/>: <form className='login__form' onSubmit={formik.handleSubmit}>\r\n          <div className='form-input'>\r\n            <label className='form-input__label' htmlFor=\"email\">Email Address {inputError('email').errorMessage}</label>\r\n            <input \r\n              className={`form-input__field${inputError('email').errorClass}`} \r\n              name=\"email\" {...formik.getFieldProps ('email')} \r\n            />\r\n          </div>\r\n\r\n          <div className='form-input'>\r\n            <label className='form-input__label' htmlFor=\"email\">Password {inputError('password').errorMessage}</label>\r\n            <input \r\n              className={`form-input__field${inputError('password').errorClass}`} \r\n              name=\"password\" type=\"password\" {...formik.getFieldProps ('password')} \r\n            />\r\n          </div>\r\n         \r\n        <button disabled={!formErrors <= 0} type=\"submit\" className=\"button--success login__submit\">Submit</button>\r\n      </form>}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}