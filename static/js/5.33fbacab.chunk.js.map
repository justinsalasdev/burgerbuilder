{"version":3,"sources":["recycle/FormInput/FormInput.js","containers/SignupPrompt/SignupPrompt.js","containers/Signup/Signup.js"],"names":["FormInput","React","forwardRef","props","ref","identity","type","formik","children","className","htmlFor","name","isTouched","touched","inputError","errors","getInputError","getFieldProps","SignupPrompt","acknowledgeAlert","endType","buttonText","createEndMessage","onClick","signupSchema","Yup","email","required","max","password","min","country","zipCode","matches","contactNumber","Signup","history","dispatch","useDispatch","useAlert","alertShown","showAlert","loading","useSelector","state","signup","conflictMessage","inputRef","useRef","useEffect","current","focus","replace","useFormik","initialValues","validationSchema","onSubmit","signupData","actions","toolkit","formErrors","Object","keys","length","Spinner","handleSubmit","editing","disabled","Alert","closeAlert"],"mappings":"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","file":"static/js/5.33fbacab.chunk.js","sourcesContent":["import './form-input.scss';\r\nimport React from 'react';\r\n        \r\nconst FormInput = React.forwardRef((props,ref) => {\r\n\r\n    const{identity,\r\n        type,\r\n        formik,\r\n        children,\r\n    } = props;\r\n    \r\n    const getInputError = name =>{\r\n        const isTouched = formik.touched[name];\r\n        const inputError = formik.errors[name];\r\n        return ( isTouched && inputError && <span className='form-input__toolkit'>{inputError}</span> ) || null;\r\n      }\r\n\r\n    return (\r\n        <div className='form-input'>\r\n            <label className='form-input__label' htmlFor={identity}>{children} {getInputError(identity)}</label>\r\n            <input \r\n                ref={ref}\r\n                type={type}\r\n                className='form-input__field' \r\n                name={identity} {...formik.getFieldProps(identity)} \r\n            />\r\n        </div>\r\n    )\r\n})\r\n        \r\n        \r\nexport default FormInput ;\r\n\r\n        ","import React from 'react';\r\nimport '../../recycle/Button/button.scss'\r\nimport './signup-prompt.scss';\r\n\r\nconst SignupPrompt = props => {\r\n    const {acknowledgeAlert,endType} = props;\r\n\r\n    const createEndMessage = (endType) => {\r\n        switch(endType){\r\n            case 'userNotSaved':\r\n                return `We have created your account but failed to save your\r\n                personal data due to some network error. Kindly login with your email\r\n                and re-update them if needed. Cheers!`\r\n            \r\n            case 'signupFailed':\r\n                return `Failed to create your account due to some error. Please try again`\r\n\r\n            default: \r\n                return 'Your account was successfully created'\r\n        }\r\n    }\r\n\r\n    const buttonText = (endType === 'signupFailed') ? 'OK' : 'Login'\r\n\r\n    return (\r\n        <div className='login-prompt'>\r\n            <p className='login-prompt__toolkit'>{createEndMessage(endType)}</p>\r\n            <button type=\"button\" className='button--success signup-prompt__button' onClick={acknowledgeAlert}>{buttonText}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SignupPrompt\r\n\r\n","import React, {useRef,useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport * as actions from '../../store/actions/exports';\r\nimport '../../recycle/Button/button.scss'\r\nimport '../../recycle/Form/form.scss'\r\nimport '../../recycle/FormInput/form-input.scss';\r\nimport Spinner from '../../recycle/Spinner/Spinner';\r\nimport FormInput from '../../recycle/FormInput/FormInput';\r\nimport Alert from '../../recycle/Alert/Alert';\r\nimport useAlert from '../../hooks/useAlert';\r\nimport SignupPrompt from '../SignupPrompt/SignupPrompt';\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst signupSchema = Yup.object ({  \r\n  email: Yup.string()\r\n      .email ('is invalid')\r\n      .required ('is required')\r\n      .max(64,'must not be longer than 20 characters'),\r\n  password: Yup.string()\r\n      .required ('is required')\r\n      .min (6, 'must be 6 characters at least'),\r\n  name: Yup.string()\r\n      .required('is required'),\r\n  country: Yup.string()\r\n      .required('is required'),\r\n  zipCode: Yup.string()\r\n      .required('is required')\r\n      .matches(/^[0-9]+$/,'must be a number')\r\n      .min(4,'must be 4 characters at least')\r\n      .max(4,'should only contain 4 digits'),\r\n  contactNumber: Yup.string()\r\n      .required('is required')\r\n      .matches(/^[0-9]+$/,'must be a number')\r\n    \r\n\r\n})\r\n\r\nconst Signup = props => {\r\n\r\n  const {history} = props;\r\n  const dispatch = useDispatch();\r\n  const [alertShown,showAlert] = useAlert(false);\r\n  const loading = useSelector(state => state.signup.loading);\r\n  const conflictMessage = useSelector(state => state.signup.conflictMessage);\r\n  const endType = useSelector(state => state.signup.endType);\r\n\r\n  const inputRef = useRef();\r\n  useEffect(() => {\r\n    inputRef.current.focus()\r\n  },[])\r\n  \r\n\r\n\r\n\r\n  const acknowledgeAlert = () => {\r\n    if(( endType === 'userSaved' ) || ( endType === 'userNotSaved') ){\r\n      history.replace('/login');\r\n      showAlert(false);\r\n    } else {\r\n      showAlert(false);\r\n    }\r\n    \r\n  }\r\n\r\n  const formik = useFormik ({\r\n    initialValues: {\r\n      email:'',\r\n      password:'',\r\n      name:'',\r\n      country:'',\r\n      zipCode:'',\r\n      contactNumber:'',\r\n    },\r\n    validationSchema: signupSchema,\r\n\r\n    onSubmit: (signupData) => {\r\n      dispatch(actions.signup(signupData,showAlert))\r\n    }\r\n  });\r\n  \r\n  const toolkit = (\r\n    (loading && <p className='form__toolkit'>Creating your account</p>) ||\r\n    (conflictMessage && <p className='form__error'>{conflictMessage.replace(/_/g,' ') + ' :('}</p>) ||\r\n    null\r\n  )\r\n\r\n\r\n  const formErrors = Object.keys(formik.errors).length;\r\n  return (\r\n    <>\r\n      <div className='form'>\r\n        {toolkit}\r\n        {loading? <Spinner/>\r\n        :<form className='form__form' onSubmit={formik.handleSubmit}>\r\n          <FormInput editing={true}  formik={formik} identity='email' type=\"email\" ref={inputRef}>Email</FormInput>\r\n          <FormInput editing={true} formik={formik} identity='password' type=\"password\">Password</FormInput>\r\n          <FormInput editing={true} formik={formik} identity='name' type=\"text\">Name</FormInput>\r\n          <FormInput editing={true} formik={formik} identity='country' type=\"text\">Country</FormInput>\r\n          <FormInput editing={true} formik={formik} identity='zipCode' type=\"text\">Zip Code</FormInput>\r\n          <FormInput editing={true} formik={formik} identity='contactNumber' type=\"text\">Contact Number</FormInput>\r\n\r\n          <button disabled={!formErrors <= 0} type=\"submit\" className=\"button--success form__submit\">Create</button>\r\n        </form>}\r\n      </div>\r\n\r\n      {!alertShown? null :\r\n      <Alert closeAlert={acknowledgeAlert} >\r\n        <SignupPrompt endType={endType} acknowledgeAlert={acknowledgeAlert}/>\r\n      </Alert>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"sourceRoot":""}