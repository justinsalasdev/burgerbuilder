{"version":3,"sources":["recycle/FormInput/FormInput.js","containers/Login/Login.js"],"names":["FormInput","React","forwardRef","props","ref","identity","type","formik","children","className","htmlFor","name","isTouched","touched","inputError","errors","getInputError","getFieldProps","Login","useAlert","alertShown","showAlert","dispatch","useDispatch","loading","useSelector","state","login","conflictMessage","errorMessage","inputRef","useRef","useEffect","current","focus","acknowledgeAlert","useFormik","initialValues","email","password","validationSchema","Yup","required","max","min","onSubmit","loginData","actions","formToolkit","replace","submitDisabled","Object","keys","length","style","color","marginBottom","handleSubmit","editing","disabled","to","closeAlert"],"mappings":"wGAAA,0BAGMA,EAAYC,IAAMC,YAAW,SAACC,EAAMC,GAAS,IAEzCC,EAIFF,EAJEE,SACFC,EAGAH,EAHAG,KACAC,EAEAJ,EAFAI,OACAC,EACAL,EADAK,SASJ,OACI,yBAAKC,UAAU,cACX,2BAAOA,UAAU,oBAAoBC,QAASL,GAAWG,EAAzD,IARc,SAAAG,GAClB,IAAMC,EAAYL,EAAOM,QAAQF,GAC3BG,EAAaP,EAAOQ,OAAOJ,GACjC,OAASC,GAAaE,GAAc,0BAAML,UAAU,uBAAuBK,IAAwB,KAK3BE,CAAcX,IAClF,yCACID,IAAKA,EACLE,KAAMA,EACNG,UAAU,oBACVE,KAAMN,GAAcE,EAAOU,cAAcZ,SAO1CL,O,0KCgEAkB,UA/ED,SAAAf,GAAU,IAAD,EAEUgB,aAAS,GAFnB,mBAEdC,EAFc,KAEHC,EAFG,KAGfC,EAAWC,cACXC,EAAUC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMH,WAC3CI,EAAkBH,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,mBACnDC,EAAeJ,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAME,gBAIhDC,EAAWC,mBACjBC,qBAAU,WACRF,EAASG,QAAQC,UACjB,IAEF,IAAMC,EAAmB,WACvBd,GAAU,IAGNd,EAAS6B,YAAW,CACxBC,cAAe,CACbC,MAAO,GACPC,SAAU,IAEZC,iBAAkBC,IAAY,CAC5BH,MAAOG,MACJH,MAAO,cACPI,SAAU,eACVC,IAAI,GAAG,yCACVJ,SAAUE,MACPC,SAAU,eACVE,IAAK,EAAG,kCAGbC,SAAU,SAAAC,GACRxB,EAASyB,IAAcD,EAAUzB,OAI/B2B,EACHpB,GAAmB,uBAAGnB,UAAU,eAAemB,EAAgBqB,QAAQ,KAAK,KAAO,QAAe,KAE/FC,GAAkBC,OAAOC,KAAK7C,EAAOQ,QAAQsC,QAAU,EAE7D,OACE,oCACE,yBAAK5C,UAAU,QAEZuC,EAEAxB,EACC,6BACE,uBAAG8B,MAAO,CAACC,MAAM,QAAQC,aAAa,SAAtC,iBACA,kBAAC,IAAD,OAIJ,0BAAM/C,UAAU,aAAaoC,SAAUtC,EAAOkD,cAC5C,kBAAC,IAAD,CAAWC,SAAS,EAAMnD,OAAQA,EAAQF,SAAS,QAAQC,KAAK,QAAQF,IAAK0B,GAA7E,SACA,kBAAC,IAAD,CAAW4B,SAAS,EAAMnD,OAAQA,EAAQF,SAAS,WAAWC,KAAK,YAAnE,YAEA,4BAAQqD,SAAUT,EAAgB5C,KAAK,SAASG,UAAU,gCAA1D,WAGDe,EAAS,KACR,kBAAC,IAAD,CAAMf,UAAU,WAAWmD,GAAG,WAA9B,mBAGFxC,EACA,kBAAC,IAAD,CAAOyC,WAAY1B,GACf,kBAAC,IAAD,CAAaA,iBAAkBA,GAAmBN,IAF3C,Q","file":"static/js/7.e016f722.chunk.js","sourcesContent":["import './form-input.scss';\r\nimport React from 'react';\r\n        \r\nconst FormInput = React.forwardRef((props,ref) => {\r\n\r\n    const{identity,\r\n        type,\r\n        formik,\r\n        children,\r\n    } = props;\r\n    \r\n    const getInputError = name =>{\r\n        const isTouched = formik.touched[name];\r\n        const inputError = formik.errors[name];\r\n        return ( isTouched && inputError && <span className='form-input__toolkit'>{inputError}</span> ) || null;\r\n      }\r\n\r\n    return (\r\n        <div className='form-input'>\r\n            <label className='form-input__label' htmlFor={identity}>{children} {getInputError(identity)}</label>\r\n            <input \r\n                ref={ref}\r\n                type={type}\r\n                className='form-input__field' \r\n                name={identity} {...formik.getFieldProps(identity)} \r\n            />\r\n        </div>\r\n    )\r\n})\r\n        \r\n        \r\nexport default FormInput ;\r\n\r\n        ","import React, {useEffect, useRef} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport * as actions from '../../store/actions/exports';\r\nimport '../../recycle/FormInput/form-input.scss';\r\nimport '../../recycle/Button/button.scss'\r\nimport '../../recycle/Form/form.scss'\r\nimport Spinner from '../../recycle/Spinner/Spinner';\r\nimport FormInput from '../../recycle/FormInput/FormInput';\r\nimport Alert from '../../recycle/Alert/Alert';\r\nimport useAlert from '../../hooks/useAlert';\r\nimport ErrorPrompt from '../../recycle/Prompt/Prompt';\r\n\r\nimport {useFormik} from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst Login = props => {\r\n\r\n  const [alertShown,showAlert] = useAlert(false);  \r\n  const dispatch = useDispatch();\r\n  const loading = useSelector(state => state.login.loading);\r\n  const conflictMessage = useSelector(state => state.login.conflictMessage);\r\n  const errorMessage = useSelector(state => state.login.errorMessage);\r\n\r\n  \r\n\r\n  const inputRef = useRef();\r\n  useEffect(() => {\r\n    inputRef.current.focus()\r\n  },[])\r\n\r\n  const acknowledgeAlert = () => {\r\n    showAlert(false)\r\n  }\r\n  \r\n  const formik = useFormik ({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    validationSchema: Yup.object ({\r\n      email: Yup.string ()\r\n        .email ('is invalid')\r\n        .required ('is required')\r\n        .max(64,'must not be longer than 20 characters'),\r\n      password: Yup.string ()\r\n        .required ('is required')\r\n        .min (6, 'must be 6 characters atleast')\r\n    }),\r\n\r\n    onSubmit: loginData => {\r\n      dispatch(actions.login(loginData,showAlert))\r\n    }\r\n  });\r\n  \r\n  const formToolkit = (\r\n    (conflictMessage && <p className='form__error'>{conflictMessage.replace(/_/g,' ') + ' :('}</p>) || null\r\n  )\r\n  const submitDisabled = !Object.keys(formik.errors).length <= 0 \r\n\r\n  return (\r\n    <>\r\n      <div className='form'>\r\n      \r\n        {formToolkit}\r\n\r\n        {loading? (\r\n          <div>\r\n            <p style={{color:'wheat',marginBottom:'1rem'}}>Signing in...</p>\r\n            <Spinner/>\r\n          </div>\r\n          \r\n        ): \r\n        <form className='form__form' onSubmit={formik.handleSubmit}>\r\n          <FormInput editing={true} formik={formik} identity='email' type=\"email\" ref={inputRef}>Email</FormInput>\r\n          <FormInput editing={true} formik={formik} identity='password' type=\"password\">Password</FormInput>\r\n\r\n          <button disabled={submitDisabled} type=\"submit\" className=\"button--success form__submit\">Submit</button>\r\n        </form>}\r\n\r\n        {loading? null: \r\n          <Link className='link--to' to='/signup'>Create account</Link>}\r\n      </div>\r\n\r\n      {!alertShown?null:\r\n        <Alert closeAlert={acknowledgeAlert}>\r\n            <ErrorPrompt acknowledgeAlert={acknowledgeAlert}>{errorMessage}</ErrorPrompt>\r\n        </Alert>\r\n      }\r\n    </>\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}