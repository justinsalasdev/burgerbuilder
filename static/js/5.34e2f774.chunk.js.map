{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredient","push","name","amount","ingredientOutput","map","key","style","textTransform","display","margin","border","padding","className","classes","Order","marginBottom","price","connect","state","orders","fetchOrders","fetching","token","authenticate","userId","dispatch","onFetchOrders","actions","withErrorHandler","useEffect","Spinner","id","axios"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,MAAQ,uB,8ECmCXC,EAhCD,SAACC,GACX,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAcF,EAAMC,YACzBA,EAAYE,KAAK,CACTC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAmBL,EAAYM,KAAI,SAAAL,GACrC,OAAO,0BACHM,IAAKN,EAAWE,KAChBK,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,UACRC,OAAQ,iBACRC,QAAS,WAEXZ,EAAWE,KATV,MASmBF,EAAWG,OAT9B,QAYX,OACI,yBAAKU,UAAWC,IAAQC,OACpB,uBAAGR,MAAO,CAACS,aAAc,WAAzB,gBAAkDZ,GAClD,sCAAW,qCAAWN,EAAMmB,U,wCCwBzBC,uBAhBS,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,YAAYD,OAC1BE,SAAUH,EAAME,YAAYC,SAC5BC,MAAOJ,EAAMK,aAAaD,MAC1BE,OAAQN,EAAMK,aAAaC,WAKR,SAACC,GACxB,MAAO,CACHC,cAAe,SAACJ,EAAME,GAAP,OAAkBC,EAASE,IAAoBL,EAAME,QAI7DP,CAA4CW,aA9C5C,SAAA/B,GAEXgC,qBAAU,WACNhC,EAAM6B,cAAc7B,EAAMyB,MAAOzB,EAAM2B,UAEzC,IAEF,IAAIL,EAAS,kBAACW,EAAA,EAAD,MAab,OAZYjC,EAAMwB,WACNF,EAAStB,EAAMsB,OAAOf,KAAI,SAAAR,GACd,OACI,kBAACkB,EAAD,CACIT,IAAKT,EAAMmC,GACXjC,YAAaF,EAAME,YACnBkB,MAAOpB,EAAMoB,YAOzC,6BACKG,KAwBsEa","file":"static/js/5.34e2f774.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__2jlGl\"};","import React from 'react';\r\nimport classes from './Order.module.css'\r\n\r\n\r\nconst order = (props) => {\r\n    const ingredients = [];\r\n\r\n    for (let ingredient in props.ingredients){\r\n        ingredients.push({\r\n                name: ingredient,\r\n                amount: props.ingredients[ingredient]\r\n            }\r\n        )\r\n    }\r\n\r\n    const ingredientOutput = ingredients.map(ingredient => {\r\n        return <span \r\n            key={ingredient.name}\r\n            style={{\r\n                textTransform: \"capitalize\",\r\n                display: 'inline-block',\r\n                margin: '0 .8rem',\r\n                border: '1px solid gray',\r\n                padding: '0.5rem'\r\n            }}\r\n            >{ingredient.name} : {ingredient.amount} </span>\r\n    })\r\n\r\n    return(\r\n        <div className={classes.Order}>\r\n            <p style={{marginBottom: '1.2rem'}}>Ingredients: {ingredientOutput}</p>\r\n            <p>Price : <strong>$ {props.price}</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default order;","import React, {useEffect} from 'react';\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios/orders';\r\nimport withErrorHandler from '../withErrorHandler/withErrorHandler';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/exports';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\n\r\n\r\nconst Orders = props => {\r\n\r\n    useEffect(() => {\r\n        props.onFetchOrders(props.token, props.userId)\r\n    // eslint-disable-next-line\r\n    },[])\r\n\r\n    let orders = <Spinner/>;\r\n            if (props.fetching){\r\n                orders = props.orders.map(order => {\r\n                            return (\r\n                                <Order \r\n                                    key={order.id}\r\n                                    ingredients={order.ingredients}\r\n                                    price={order.price}\r\n                                />\r\n                            )\r\n                        }) \r\n            }\r\n    \r\n    return(\r\n        <div>\r\n            {orders}\r\n        </div>\r\n        )\r\n}\r\n\r\n    \r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        orders: state.fetchOrders.orders,\r\n        fetching: state.fetchOrders.fetching,\r\n        token: state.authenticate.token,\r\n        userId: state.authenticate.userId\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onFetchOrders: (token,userId) => dispatch(actions.fetchOrders(token,userId))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Orders,axios));"],"sourceRoot":""}